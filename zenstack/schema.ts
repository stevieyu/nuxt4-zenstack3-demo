//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

import { type SchemaDef, ExpressionUtils } from "@zenstackhq/runtime/schema";
export const schema = {
    provider: {
        type: "sqlite"
    },
    models: {
        Tag: {
            fields: {
                id: {
                    type: "Int",
                    id: true,
                    attributes: [{ name: "@id" }, { name: "@default", args: [{ name: "value", value: ExpressionUtils.call("autoincrement") }] }],
                    default: ExpressionUtils.call("autoincrement")
                },
                name: {
                    type: "String",
                    unique: true,
                    attributes: [{ name: "@unique" }]
                },
                pid: {
                    type: "Int",
                    optional: true,
                    foreignKeyFor: [
                        "parent"
                    ]
                },
                parent: {
                    type: "Tag",
                    optional: true,
                    attributes: [{ name: "@relation", args: [{ name: "name", value: ExpressionUtils.literal("ParentChildrenTag") }, { name: "fields", value: ExpressionUtils.array([ExpressionUtils.field("pid")]) }, { name: "references", value: ExpressionUtils.array([ExpressionUtils.field("id")]) }] }],
                    relation: { opposite: "children", name: "ParentChildrenTag", fields: ["pid"], references: ["id"] }
                },
                children: {
                    type: "Tag",
                    array: true,
                    attributes: [{ name: "@relation", args: [{ name: "name", value: ExpressionUtils.literal("ParentChildrenTag") }] }],
                    relation: { opposite: "parent", name: "ParentChildrenTag" }
                }
            },
            idFields: ["id"],
            uniqueFields: {
                id: { type: "Int" },
                name: { type: "String" }
            }
        }
    },
    plugins: {}
} as const satisfies SchemaDef;
export type SchemaType = typeof schema;
